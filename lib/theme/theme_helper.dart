import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA70001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(28.h),
          ),
          shadowColor: appTheme.indigo30028,
          elevation: 10,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.whiteA70001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(27.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onPrimaryContainer,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray500,
          fontSize: 14.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray500,
          fontSize: 12.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 55.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 45.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: appTheme.black900,
          fontSize: 36.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 31.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 28.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 25.fSize,
          fontFamily: 'SF Pro Display',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro Text',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 8.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 18.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 15.fSize,
          fontFamily: 'Sofia Pro',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFE724C),
    primaryContainer: Color(0XFF272D2F),
    secondaryContainer: Color(0XFF9A9FB3),

    // Error colors
    errorContainer: Color(0XFF5B5B5E),
    onError: Color(0XFF8B9099),

    // On colors(text colors)
    onPrimary: Color(0XFF111719),
    onPrimaryContainer: Color(0XFFF1F1F3),
    onSecondaryContainer: Color(0XFF191B2E),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFC529);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blueA400 => Color(0XFF1877F2);

  // BlueGray
  Color get blueGray100 => Color(0XFFD3D1D8);
  Color get blueGray10001 => Color(0XFFD4D5DA);
  Color get blueGray10002 => Color(0XFFD0D2D1);
  Color get blueGray300 => Color(0XFF9EA1B1);
  Color get blueGray400 => Color(0XFF8B8A9D);
  Color get blueGray40001 => Color(0XFF848688);
  Color get blueGray40002 => Color(0XFF898D9B);
  Color get blueGray40003 => Color(0XFF7E7C91);
  Color get blueGray40004 => Color(0XFF7D8391);
  Color get blueGray40005 => Color(0XFF767F9D);
  Color get blueGray40006 => Color(0XFF858891);
  Color get blueGray50 => Color(0XFFEEF0F2);
  Color get blueGray700 => Color(0XFF434B67);
  Color get blueGray70000 => Color(0X00494D62);
  Color get blueGray800A9 => Color(0XA92F384E);
  Color get blueGray900 => Color(0XFF313642);
  Color get blueGray90001 => Color(0XFF323643);

  // BlueGrayE
  Color get blueGray100E5 => Color(0XE5D2D5DB);

  // BlueGrayf
  Color get blueGray507f => Color(0X7FE9EDF2);

  // BlueGraye
  Color get blueGray7001e => Color(0X1E3F4B5E);

  // DeepOrangef
  Color get deepOrange8007f => Color(0X7FDA4820);

  // DeepOrange
  Color get deepOrangeA200 => Color(0XFFF56844);
  Color get deepOrangeA400 => Color(0XFFFF3600);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get gray20001 => Color(0XFFF2EAEA);
  Color get gray20002 => Color(0XFFEFEFEF);
  Color get gray400 => Color(0XFFC4C4C4);
  Color get gray40001 => Color(0XFFBEBEBE);
  Color get gray40002 => Color(0XFFB3B3B3);
  Color get gray50 => Color(0XFFFBFCFC);
  Color get gray500 => Color(0XFF9796A1);
  Color get gray700 => Color(0XFF66666D);
  Color get gray800 => Color(0XFF3F434A);

  // Grayf
  Color get gray2003f => Color(0X3FE8E8E8);

  // Green
  Color get green400 => Color(0XFF53D676);
  Color get green40001 => Color(0XFF4EE476);

  // Indigo
  Color get indigo30028 => Color(0X287A80BE);

  // LightGreenE
  Color get lightGreen100E5 => Color(0XE5E0DBC4);

  // Red
  Color get red500 => Color(0XFFEA4335);

  // Teal
  Color get teal500 => Color(0XFF029094);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);
  Color get whiteA70001 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
